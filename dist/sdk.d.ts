// Generated by dts-bundle-generator v6.4.0

declare function sha256(message: any): string;
export interface MerakiScriptConfiguration {
	sdkVersion?: string;
	renderTimeMs?: number;
	library?: {
		name?: string;
		version?: string;
	};
}
declare abstract class MerakiScript {
	abstract execute(): void;
	abstract configure(): MerakiScriptConfiguration;
	abstract version(): string;
	draw(): void;
	initialize(): void;
	finalize(): void;
	render(): void;
}
declare class Random {
	tokenData: {
		tokenHash: string;
		tokenId: string;
	};
	protected state: Record<string, any>;
	protected seedValues: Record<string, any>;
	prngA: any;
	prngB: any;
	useA: boolean;
	constructor(tokenData?: {
		tokenHash: string;
		tokenId: string;
	});
	decimal(): number;
	number(a?: undefined, b?: undefined): any;
	integer(a?: undefined, b?: undefined): number;
	boolean(p?: number): boolean;
	element(list: any): any;
	generateSeeds(str: string): number[];
	protected initializeSeeds(seeds: number[]): {
		eps: number;
		m0: number;
		m1: number;
		m2: number;
		m3: number;
		a0: number;
		a1: number;
		a2: number;
		a3: number;
	};
	protected initializeState(stateSize?: number, integerSize?: 8 | 16 | 32 | 64): {
		integerSize: 64 | 16 | 8 | 32;
		stateSize: number;
		state: Uint8Array | Uint16Array | Uint32Array | BigUint64Array;
		dataView: DataView;
	};
	rnd(): number;
	shuffle(a: any[]): any[];
}
declare function chunkify(str: string, size: number): string[];
export declare type Brand<Name, Type> = Type & {
	_type?: Name;
};
export declare type u32 = Brand<"u32", number>;
export declare type u64 = Brand<"u64", [
	u32,
	u32
]>;
export declare type x86hash32State = {
	h1: u32;
	len: number;
	rem: Uint8Array;
};
export declare type x86hash128State = {
	h1: u32;
	h2: u32;
	h3: u32;
	h4: u32;
	len: number;
	rem: Uint8Array;
};
export declare type x64hash128State = {
	h1: u64;
	h2: u64;
	len: number;
	rem: Uint8Array;
};
export interface Dimensions {
	height: number;
	width: number;
}
export interface MerakiTokenData {
	tokenHash: string;
	tokenId: string;
	mintedAt: number | string;
}
declare class Meraki {
	protected tokenData: MerakiTokenData;
	protected registerScriptCalled: boolean;
	protected randomObj: Random;
	get random(): Random;
	get data(): MerakiTokenData;
	get utils(): {
		hash: {
			murmurhash3: {
				hash32: {
					(buf?: string | Uint8Array | undefined, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash32State | undefined, finalize?: true | undefined): import("@/lib/murmurhash3").u32;
					(buf: string | Uint8Array, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash32State | undefined, finalize?: false | undefined): import("@/lib/murmurhash3").x86hash32State;
				};
				hash128: {
					(buf?: Uint8Array | undefined, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash128State | undefined, finalize?: true | undefined): Uint8Array;
					(buf: string, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash128State | undefined, finalize?: true | undefined): string;
					(buf: string | Uint8Array, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash128State | undefined, finalize?: false | undefined): import("@/lib/murmurhash3").x86hash128State;
				};
				x86: {
					hash32: {
						(buf?: string | Uint8Array | undefined, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash32State | undefined, finalize?: true | undefined): import("@/lib/murmurhash3").u32;
						(buf: string | Uint8Array, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash32State | undefined, finalize?: false | undefined): import("@/lib/murmurhash3").x86hash32State;
					};
					hash128: {
						(buf?: Uint8Array | undefined, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash128State | undefined, finalize?: true | undefined): Uint8Array;
						(buf: string, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash128State | undefined, finalize?: true | undefined): string;
						(buf: string | Uint8Array, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x86hash128State | undefined, finalize?: false | undefined): import("@/lib/murmurhash3").x86hash128State;
					};
				};
				x64: {
					hash128: {
						(buf?: Uint8Array | undefined, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x64hash128State | undefined, finalize?: true | undefined): Uint8Array;
						(buf: string, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x64hash128State | undefined, finalize?: true | undefined): string;
						(buf: string | Uint8Array, state?: import("@/lib/murmurhash3").u32 | import("@/lib/murmurhash3").x64hash128State | undefined, finalize?: false | undefined): import("@/lib/murmurhash3").x64hash128State;
					};
				};
			};
			sha256: typeof sha256;
		};
		chunkify: typeof chunkify;
	};
	get canvas(): Dimensions;
	get window(): Dimensions;
	registerScript(scriptObject: MerakiScript): MerakiScript;
	tokenAgeInSeconds(): number;
	isScriptRegistered(): boolean;
	constructor(tokenId: string, hash: string);
}
export declare const sdk: {
	Meraki: typeof Meraki;
	MerakiScript: typeof MerakiScript;
};
export default sdk;

export {};
